{
	"info": {
		"_postman_id": "5f3c6b1a-1234-4567-89ab-0123456789ab",
		"name": "Mito Graph Microservice",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"description": "Postman Collection for Mito Graph Microservice API"
	},
	"item": [
		{
			"name": "Node Management",
			"item": [
				{
					"name": "Get All Nodes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    const jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/nodes",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "nodes"]
						}
					}
				},
				{
					"name": "Create Node",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate unique identifiers",
									"const randomString = Math.random().toString(36).substring(2, 10);",
									"pm.environment.set(\"unique_node_name\", `Test Node ${randomString}`);",
									"pm.environment.set(\"unique_cbdb_id\", `NODE_${randomString.toUpperCase()}`)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Node created successfully\", function () {",
									"    const jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.be.an('object');",
									"    pm.expect(jsonResponse.name).to.equal(pm.environment.get(\"unique_node_name\"));",
									"    pm.expect(jsonResponse.cbdbId).to.equal(pm.environment.get(\"unique_cbdb_id\"));",
									"});",
									"",
									"// Save node details for further operations",
									"const jsonResponse = pm.response.json();",
									"pm.environment.set(\"nodeId\", jsonResponse.id);",
									"pm.environment.set(\"cbdbId\", jsonResponse.cbdbId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"cbdbId\": \"{{unique_cbdb_id}}\",\n    \"name\": \"{{unique_node_name}}\",\n    \"itemType\": \"{{default_item_type}}\",\n    \"importance\": \"{{default_importance}}\",\n    \"status\": \"ACTIVE\",\n    \"locationLat\": 45.4642,\n    \"locationLon\": 9.1900,\n    \"itemIcon\": \"default-icon\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/nodes",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "nodes"]
						}
					}
				},
				{
					"name": "Get Node by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Correct node retrieved\", function () {",
									"    const jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse.id).to.equal(pm.environment.get(\"nodeId\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/nodes/{{nodeId}}",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "nodes", "{{nodeId}}"]
						}
					}
				},
				{
					"name": "Get Node by CBDB ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Correct node retrieved\", function () {",
									"    const jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse.cbdbId).to.equal(pm.environment.get(\"cbdbId\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/nodes/cbdb/{{cbdbId}}",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "nodes", "cbdb", "{{cbdbId}}"]
						}
					}
				},
				{
					"name": "Update Node",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomUpdate = Math.random().toString(36).substring(2, 10);",
									"pm.environment.set(\"updated_name\", `Updated Node ${randomUpdate}`);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Node updated successfully\", function () {",
									"    const jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse.name).to.equal(pm.environment.get(\"updated_name\"));",
									"    pm.expect(jsonResponse.importance).to.equal('HIGH');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"cbdbId\": \"{{cbdbId}}\",\n    \"name\": \"{{updated_name}}\",\n    \"importance\": \"HIGH\",\n    \"status\": \"UPDATED\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/nodes/{{nodeId}}",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "nodes", "{{nodeId}}"]
						}
					}
				},
				{
					"name": "Delete Node",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/nodes/{{nodeId}}",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "nodes", "{{nodeId}}"]
						}
					}
				}
			]
		},
		{
			"name": "Advanced Queries",
			"item": [
				{
					"name": "Custom Cypher Query",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    const jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "MATCH (n:ITEM) RETURN n.name, n.cbdb_id LIMIT 10"
						},
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/nodes/query",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "nodes", "query"]
						}
					}
				},
				{
					"name": "Create Node Relation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate unique IDs for source and target nodes",
									"const sourceRandom = Math.random().toString(36).substring(2, 10).toUpperCase();",
									"const targetRandom = Math.random().toString(36).substring(2, 10).toUpperCase();",
									"",
									"pm.environment.set(\"sourceCbdbId\", `SOURCE_${sourceRandom}`);",
									"pm.environment.set(\"targetCbdbId\", `TARGET_${targetRandom}`);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/{{api_version}}/nodes/relation?sourceCmdbId={{sourceCbdbId}}&targetCmdbId={{targetCbdbId}}&relationType=CONNECTS_TO",
							"host": ["{{base_url}}"],
							"path": ["api", "{{api_version}}", "nodes", "relation"],
							"query": [
								{
									"key": "sourceCmdbId",
									"value": "{{sourceCbdbId}}"
								},
								{
									"key": "targetCmdbId",
									"value": "{{targetCbdbId}}"
								},
								{
									"key": "relationType",
									"value": "CONNECTS_TO"
								}
							]
						}
					}
				}
			]
		}
	]
}